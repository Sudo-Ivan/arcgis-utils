name: Go Build Multi-Platform

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # Trigger on version tags like v1.0, v1.2.3
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Add exclusions if certain combinations are not needed or supported
          # Example: Exclude windows/arm64 if not targeted
          # - goos: windows
          #   goarch: arm64

    runs-on: ubuntu-latest

    outputs: # Define an output to indicate completion
      build_complete: ${{ steps.build_step.outcome == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build
      id: build_step # Give the build step an id
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="arcgis-utils-go-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          output_name+=".exe"
        fi
        go build -v -o "${output_name}" .
        echo "Built: ${output_name}"

    - name: Upload Artifacts (Consolidated)
      uses: actions/upload-artifact@v4
      with:
        name: binaries # Upload all binaries under a single artifact name
        path: arcgis-utils-go-* # Use wildcard to grab all built files

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build # Run after the build job is complete
    if: startsWith(github.ref, 'refs/tags/') # Only run on tag pushes

    permissions:
      contents: write # Needed to create releases

    steps:
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./release-assets # Download to a specific directory

      - name: List downloaded files (for debugging)
        run: ls -R ./release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-assets/* # Upload all files from the download directory
          # The release name and body will be automatically generated from the tag
          # Set `draft: true` if you want to manually publish the release
          # draft: false
          # Set `prerelease: true` if the tag indicates a pre-release version
          # prerelease: contains(github.ref, '-rc')